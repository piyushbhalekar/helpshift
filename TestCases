Test Case Id:1
	Test Case Description:Reset the wallet
	Preconditions:The wallet contains the cards
	Test Data: Before:
					Card_data ={ card_number,card_name,transaction_time}
			   		Card_list= { card_number }
			   		count=slot
			   After:
			   		Card_data ={ }
			   		Card_list= { }
			   		count=3
			   	
	Steps: 1.Run the program
		   2.Choose Reset Option
		   3.Enter the number of slots
	Expected Results:
		Wallet Reset
	Actual Results:
		Wallet Reset. The cards in wallet are removed. Wallet's slot reset to given user's slot.
	Pass/Fail: Pass
	
Test Case Id:2
	Test Case Description:Add a new Card in wallet
	Preconditions:A wallet is created with slots in it. By default its 3.
	Test Data: Before:
					Card_data ={ card_number,card_name,transaction_time}
			   		Card_list= { card_number }
			   		card_cnt=number of cards before.
			   After:
			   		Card_data ={old cards + new card}
			   		Card_list= { old cards +new card}
			   		card_cnt=card_cnt+1
			   	
	Steps: 1.Run the program
		   2.Choose Add new card Option
		   3.Enter the card name.
	Expected Results:
		New Card added.
	Actual Results:
		New Card added and returns a unique card number
	Pass/Fail: Pass
	
Test Case Id:3
	Test Case Description:Use a existing Card
	Preconditions:The wallet contains the cards
	Test Data: Before:
					Card_data ={ card_number,card_name,transaction_time}
			   		Card_list= { card_number }
			   		card_usage
			   		transaction_time
			   After:
			   		card_usage=card_usage+1
			   		update transaction_time
			   	
	Steps: 1.Run the program
		   2.Choose Use existing card Option
		   3.Enter the unqiue number of card
	Expected Results:
		Card used.
	Actual Results:
		Card used with incrementing the card_usage by 1
	Pass/Fail: Pass
	
Test Case Id:4
	Test Case Description:Show cards in wallet
	Preconditions:The wallet contains the cards or Do not contains the cards
	Test Data: 
				Card_data ={ card_number,card_name,transaction_time}
			   	Card_list= { card_number }
			   	if wallet is empty the shows no cards in wallet
			   	
	Steps: 1.Run the program
		   2.Choose Show Option
		   
	Expected Results:
		Displays the cards in wallet
	Actual Results:
		Displays the cards in wallet in most recently used fashion.
	Pass/Fail: Pass
	
Test Case Id:5
	Test Case Description:Sort the wallet
	Preconditions:The wallet contains the cards
	Test Data: Before:
					Card_data ={ card_number,card_name,transaction_time}
			   		Card_list= { card_number }
			   		count=slot
			   After:
			   		Card_data ={ card_number,card_name,transaction_time }
			   		Card_list= { sorted card_number }
			   		
			   
	Expected Results:
		Sorted wallet
	Actual Results:
		Sort the wallet in most recently used fashoin on basis of usage pattern and transaction time
	Pass/Fail: Pass
	

Test Case Id:6
	Test Case Description:Input validation
	Preconditions:The wallet contains the cards
	Test Data: 
			card_name
			   
	Steps: 1. Run the program
		   2. Choose add a new card option
		   3. Enter the Card_name
				
	Expected Results:
		if card_name is string, card accepted.
		if card_name is not string , enter valid card_name.
		
	Actual Results:
		if card_name is string, card accepted.
		if card_name is not string , enter valid card_name.
	Pass/Fail: Pass

